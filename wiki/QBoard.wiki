#summary Main page

= Welcome to QBoard =


QBoard is a UI for playing near-arbitrary board games. It is mainly intended as
a prototyping platform for testing/playing my own boardgame designs.

QBoard is a "re-imagining" of a much older project of mine called
[http://qub.sourceforge.net|QUB, the Q Universal Boardgame]. QUB was quite monolithic, and its sheer size eventually caused its downfall. While QBoard originally aimed to be a fairly minimalistic application, Qt makes it pretty easy to just keep adding features, so QBoard already does a lot more than was originally planned.

== Screenshots ==

You can find screenshots over at: http://wanderinghorse.net/gaming/QBoard

Here's one to get you started:

http://wh/gaming/QBoard/thumbs/qboard-20080611-veg.jpg


== Features ==

  * A simple interface for quickly setting up and playing a boardgame.
  * Has powerful and flexible save and load features, making it easy to add load/save support for new data types.
  * A zoomable, rotatable playing area (game board + pieces).
  * Full control over game piece background colors, transparency, rotation, and border (color, transparency, size, line style). Finally: translucent game pieces!
  * Supports an arbitrary number of dockable "minimap" views, all fully interactive and synchronized in real time.
  * On-board HTML widgets, so you can annotate your game as much as you like.
  * On-board lines, with customizable colors, line size, and transparency level. Useful for marking movement paths (or histories), firing args, line of sight, and such.
  * A very simple batch scripting tool for generating game setups (e.g. use shell scripts to generate games using existing graphics files).

== Mis-features and significant TODOs ==

  * Only allows 1 open board per app instance. (QUB used MDI, but this complicated the design significantly.)
  * Any semblance of network play is a long, long way off, if it ever happens at all.

See also: the [TODOs] Page


== Requirements ==

  * Patience. It's alpha software.
  * Qt 4.4 with STL support enabled. It works with Qt 4.3.0-4.3.5, but has some significantly weird behaviours in those versions which don't show up on 4.4.
  * Platforms: it tries to be platform-independent, and it "should" work on any Qt platform which supports all the big Qt features (e.g. QWebKit, STL, etc.). i would love to hear from anyone who tries it on on-Linux platforms.
  * Some graphics which you can use as game boards and playing pieces. We've got some free gaming maps at http://wanderinghorse.net/gaming/maps and free counters (playing pieces) at http://wanderinghorse.net/gaming/counters.
  * [http://s11n.net libs11n] 1.2.7+. It comes with a standalone copy of s11n, so you don't need to download it. (A copy is used because libs11n can't work as a DLL on Windows due to broken linking conventions on those platforms, so we have to compile it directly in.) s11n requires a fairly recent C++ compiler - gcc 4.1+ are believed to be okay, as are newer MS compilers.


== Status ==

QBoard is very much beta software. It runs fine, but some important
features are as yet unimplemented, and some other things will probably
change significantly.

The copy of the source code in Subversion may or may not work at any given
moment (normally it does, though). Occasionally it reaches a point where we say, "it works! Ship it!" Those are the "official" releases (available via the
downloads link), and are believed to be free of major defects
(e.g. crashes or other data loss).

That said - there will be times when a release is not strictly backwards-compatible (i.e. cannot read all data written with an earlier version). This will probably be minimal, however, because the i/o layer allows us to easily support multiple versions of an object's i/o format in many cases. There are *never* any guarantees that an older version of QBoard can read all data written by a newer version.

#summary Utility code for serializing Qt data using libs11n

= Serializing Qt-based objects using libs11n =

Since i'm the maintainer of the s11n project (http://s11n.net), a library for serializing
objects in C++, QBoard uses libs11n for its serialization needs (that is, loading and saving). As QBoard develops, code is written to bind Qt-based types to the s11n serialization framework. That code is independent of QBoard and may be helpful to coders working on arbitrary Qt-based projects. (Historical note: libs11n was originally written with the express intent of (someday) supporting this very application.)

The code is available via the QBoard source tree (look for `src/*11n*.*`) or as a separate download on the downloads page (look for `s11n-qt-VERSION.tar.gz`, though those versions may be older than what is the in the current QBoard tree).

The distribution contains code for de/serializing the following Qt types:

  * QByteArray, with optional zlib compression
  * QBrush
  * QColor
  * QDate/QTime/QDateTime
  * QFont
  * QLine/QLineF
  * QList/QVector
  * QMap
  * QMatrix
  * QRect/QRectF
  * QPair
  * QPen
  * QRegExp
  * QPixmap
  * QPoint/QPointF
  * QPolygon
  * QSize/QSizeF
  * QString, both ASCII and Unicode strings
  * QTransform
  * Many forms of QVariant, including QVariants holding any SerializableType object (with a little help - see below).

It also comes with proxy objects which allow QIODevices to be used via the STL i/ostream interfaces (so you can e.g. save s11n data out to a QFile instead of a std::ofile).

The code is central to QBoard's save/load features and is believed to work quite well.

Suggestions, fixes, etc., are of course always welcome.

Happy hacking!

= QVariant and Serializables =

Probably the most interesting part of the QVariant/S11n support is the ability to store arbitrary Serializable types (as defined by libs11n) in QVariants, and then pass them around. To store a Serializable in a QVariant we need to use a proxy type. That looks like this:

{{{
#include "S11nQt.h"
using namespace s11n::qt;
...
QVariant var( VariantS11n(mySerializable) );
}}}

To deserialize it, we do:

{{{
if( var.canConvert<VariantS11n>() )
{
  VariantS11n sv( myVariant.value<VariantS11n>() );
  MySerializable * my = sv.deserialize<MySerializable>();
  ...
}
}}}
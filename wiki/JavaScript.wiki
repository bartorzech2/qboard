#summary Scripting QBoard with JavaScript
#labels Docs-User,Featured

= Introduction =

Starting with version 20080827, QBoard is getting JavaScript support. This document gives an overview of what's possible with the current code.

The things it can currently do:

  * Load new pieces by class name.
  * Set most basic properties (numbers, colors, and positions), though using a bit of an odd workaround (see the examples). By setting properties, pieces can be controlled in various ways.

Things that it cannot currently do:

  * Set piece properties using the natural JS properties syntax (it requires a function call instead).
  * Non-trivial properties cannot be properly _read_, only set. This includes QColor and QPoint objects, both of which are used in script code for various piece properties.

Some of those are on the to-fix list, but i'm not currently sure how/if some of it can be properly done (that is, the way i want to see it work).

Some notable things which need improving include:

  * Send print() output somewhere sensible. It currently goes to stdout, which is only (marginally) useful if you launch QBoard from a console (i always do).
  * Child objects. It's not currently possible to traverse or manipulate them.
  * Use of JS property syntax to get at object properties.
  * Useful script-side representations of some basic Qt types, like QPoint.
  * Attach JS script code as event handlers for native objects. The catch here is that the native objects currently don't know about the underlying JS engine, and so they have nowhere to actually run the JS code.

= Running JavaScript files =

To run a JS file in QBoard, simply double-click it. The JS print() command will send the output to stdout (your console, if you started QBoard from a console). Exceptions thrown from the script will be shown (with a stacktrace) in a dialog window.

= QBoard data types in JS =

Currently only the following QBoard-related types are even remotely scriptable:

  * QGIPiece - the basic piece type, represented by a small image file.
  * QGIDot - a colorful dot
  * QGIHtml - like little notes you can paste on your board

QPoint and QColor objects can be created for use as property values, but cannot be used in any other way (you can't currently get at their values from script code).

= Examples =

Here are some example of things which currently work:

{{{
qboard.clear(); // clears the board of all items
qboard.board.loadPixmap( "maps/myMap.jpg" );
var pc = qboard.createObject('QGIHtml'); // create new piece
qboard.props( pc,{ // set a few properties:
  html:"<body bgcolor='#ffffff'>This is my text</body>",
  pos:QPoint(30,50)
});
// Create a new piece:
pc = qboard.createObject('QGIPiece');
qboard.props(pc,{
  pixmap:'counters/sample/003-mage.png',
  pos:QPoint(50,50),
  color:QColor(255,0,0,127)
});
}}}

Aside from creating objects and setting properties, there's not much it can currently do. That said, using properties one can control almost all aspects of a piece which can be customized via the popup menus.

Here is an overview of the list of common properties (in alphabetical order), their expected data types, and the piece types which support this property. The piece types are listed by their class name, and is the name which can be passed to `qboard.createObject("ClassName")` to create a new object.

|| *Property* || *JS data type* || *Piece types* || *Description* ||
|| `angle` || integer or floating point || QGIHtml, QGIPiece || rotation angle ||
|| `borderAlpha` || as for `colorAlpha` || QGIPiece || alpha level of a piece's border ||
|| `borderColor` || as for `color` || QGIPiece ||color of the piece's border || 
|| `color` || string or QColor(r,g,b[,a]) || QGIPiece, QGIDot ||The color of the object. The string may be a common color name ("red" or "lightblue") or HTML notation ("#RRGGBB"). ||
|| `colorAlpha` || integer or floating point || QGIPiece, QGIDot || alpha level of the piece's color. If the number is less than 1.0 is it considered to be a relative alpha level between 0.0 and 1.0, otherwise it is assumed to be an integer value between 1 (very nearly transparent) and 255 (fully opaque). ||
|| `html` || text || QGIHtml || HTML (a subset, actually) text to display. ||
|| `pixmap` || image filename, relative to QBoard Home || QGIPiece, the game board ||The image file used for an item. This determines the piece's size. Any image format supported by Qt is okay. || 
|| `pos` || QPoint(X,Y) || QGIPiece, QGIHtml, QGIDot || the position of the piece, in x/y coordinates. This is normally the top/left corner, but some pieces (e.g. QGIDot) are centered. ||
|| `scale` || positive floating-point number || QGIPiece, QGIHtml, QGIDot || Relative scale of the item, 1.0 being normal, 0.0 being non-existent, and 2.0 being double normal size. ||

The on-board lines (QGILine) are not currently scriptable because they will be replaced at some point (their current model requires to much special-case handling of events and serialization).